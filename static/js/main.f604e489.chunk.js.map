{"version":3,"sources":["modules/index.ts","ownHistory.ts","app/theme/index.ts","app/GlobalStyles.tsx","app/InnerApp.tsx","app/ConnectedApp.tsx","app/App.tsx","app/createStore.ts","serviceWorker.ts","index.tsx"],"names":["global","createReducer","history","combineReducers","router","connectRouter","createHistory","createTheme","createMuiTheme","typography","fontSize","fontFamily","withGlobalStyles","withStyles","html","height","lineHeight","body","overflow","position","InnerApp","theme","ThemeProvider","CssBaseline","GlobalStyles","exact","path","render","ConnectedApp","App","useState","store","setStore","useEffect","createStore","rootReducer","applyMiddleware","thunk","routerMiddleware","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","error"],"mappings":"2QAGMA,EAAS,GAOAC,EALO,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAAiBC,YAAgB,CACrDH,SACAI,OAAQC,YAAcH,M,QCHTA,EAFCI,c,iCCODC,EAPK,kBAAMC,IAAe,CACvCC,WAAY,CACVC,SAAU,GACVC,WAAY,8B,gBCcDC,E,MAjBUC,GAAW,CAClC,UAAW,CACTC,KAAM,CACJC,OAAQ,OACRC,WAAY,MAEdC,KAAM,CACJF,OAAQ,OACRG,SAAU,UAEZ,QAAS,CACPH,OAAQ,OACRI,SAAU,cAKDP,EAAiB,kBAAM,QCoBvBQ,EA9BY,WACzB,IAAMC,EAAQd,IAEd,OACE,oCACE,kBAACe,EAAA,EAAD,CAAeD,MAAOA,GACpB,kBAACE,EAAA,EAAD,MACA,kBAACC,EAAD,MACA,kBAAC,IAAD,CAAiBtB,QAASA,GACxB,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEuB,OAAK,EACLC,KAAK,IACLC,OAAQ,kBAAO,uCAEjB,kBAAC,IAAD,CACED,KAAK,SACLC,OAAQ,kBAAO,wCAEjB,kBAAC,IAAD,CACED,KAAK,IACLC,OAAQ,kBAAO,+CCrBdC,EANgB,WAC7B,OACE,kBAAC,EAAD,OCkBWC,EAlBO,WAAO,IAAD,EACEC,mBAAc,MADhB,mBAClBC,EADkB,KACXC,EADW,KAO1B,OAJAC,qBAAU,WACRD,ECFKE,YACLC,EAAY,CAAEjC,YACdkC,YACEC,IACAC,YAAiBpC,QDDlB,IAEE6B,EAKH,kBAAC,IAAD,CAAUA,MAAOA,GACf,kBAAC,EAAD,OALK,MEDSQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASjB,OAAO,kBAAC,EAAD,MAASkB,SAASC,eAAe,SDoI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,aAAaC,MAAMC,QAAQC,UACvCF,MAAMC,QAAQC,S","file":"static/js/main.f604e489.chunk.js","sourcesContent":["import { combineReducers } from 'redux'\nimport { connectRouter } from 'connected-react-router'\n\nconst global = {}\n\nconst createReducer = ({ history }) => combineReducers({\n  global,\n  router: connectRouter(history)\n} as any)\n\nexport default createReducer\n","import { createHashHistory as createHistory } from 'history'\n\nconst history = createHistory()\n\nexport default history\n","import createMuiTheme from '@material-ui/core/styles/createMuiTheme'\n\nconst createTheme = () => createMuiTheme({\n  typography: {\n    fontSize: 16,\n    fontFamily: '\"Open Sans\", sans-serif'\n  }\n})\n\nexport default createTheme\n","import withStyles from '@material-ui/core/styles/withStyles'\n\nconst withGlobalStyles = withStyles({\n  '@global': {\n    html: {\n      height: '100%',\n      lineHeight: 1.15\n    },\n    body: {\n      height: '100%',\n      overflow: 'hidden'\n    },\n    '#root': {\n      height: '100%',\n      position: 'relative'\n    }\n  }\n})\n\nexport default withGlobalStyles(() => null)\n","import React from 'react'\nimport { ConnectedRouter } from 'connected-react-router'\nimport { Route, Switch } from 'react-router-dom'\nimport { ThemeProvider } from '@material-ui/styles'\nimport createTheme from 'app/theme'\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport history from 'ownHistory'\nimport GlobalStyles from 'app/GlobalStyles'\n\nconst InnerApp: React.FC = () => {\n  const theme = createTheme()\n\n  return (\n    <>\n      <ThemeProvider theme={theme}>\n        <CssBaseline />\n        <GlobalStyles />\n        <ConnectedRouter history={history}>\n          <Switch>\n            <Route\n              exact\n              path='/'\n              render={() => (<h1>Home</h1>)}\n            />\n            <Route\n              path='/guest'\n              render={() => (<h1>Guest</h1>)}\n            />\n            <Route\n              path='/'\n              render={() => (<h1>Default</h1>)}\n            />\n          </Switch>\n        </ConnectedRouter>\n      </ThemeProvider>\n    </>\n  )\n}\n\nexport default InnerApp\n","import React from 'react'\nimport InnerApp from 'app/InnerApp'\n\nconst ConnectedApp: React.FC = () => {\n  return (\n    <InnerApp />\n  )\n}\n\nexport default ConnectedApp\n","import React, { useEffect, useState } from 'react'\nimport { Provider } from 'react-redux'\nimport createStore from './createStore'\nimport ConnectedApp from './ConnectedApp'\n\nconst App: React.FC = () => {\n  const [ store, setStore ] = useState<any>(null)\n\n  useEffect(() => {\n    setStore(createStore())\n  }, [])\n\n  if (!store) {\n    return null\n  }\n\n  return (\n    <Provider store={store}>\n      <ConnectedApp />\n    </Provider>\n  )\n}\n\nexport default App\n","import { createStore, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport { routerMiddleware } from 'connected-react-router'\nimport rootReducer from 'modules'\nimport history from 'ownHistory'\n\nexport default () => {\n  return createStore(\n    rootReducer({ history }),\n    applyMiddleware(\n      thunk,\n      routerMiddleware(history)\n    )\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register (config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        }).catch(console.error)\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker === null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType !== null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          }).catch(console.error)\n        }).catch(console.error)\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister().catch(console.error)\n    }).catch(console.error)\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './app/App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}